# -*- coding: utf-8 -*-
"""Medical.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PaZS54k4q8E0BC4NlAs55jtEeL-qWIjy
"""

import csv
import random
import numpy as np
import matplotlib.pyplot as plt

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers


#Model training
data_read = open('train1.csv', 'r')
datareader = csv.reader(data_read, delimiter=',')
data = []
for row in datareader:
    data.append(row)

headings = data[0]
dataset = data[1:][:]

total_data = len(dataset)
total_col = len(dataset[0][:])

dataset_float = np.zeros([25000,65])
for x in range(total_data):
  for y in range(total_col):
    dataset_float[x][y] = float(dataset[x][y])

random.shuffle(dataset_float)

dataset_float = tf.convert_to_tensor(dataset_float)

X_train = dataset_float[:17500,:64]
Y_train = dataset_float[:17500,64]

X_test = dataset_float[17500:,:64]
Y_test = dataset_float[17500:,64]

Y_train

train_set = tf.data.Dataset.from_tensor_slices((X_train, Y_train)).batch(128)
test_set = tf.data.Dataset.from_tensor_slices((X_test, Y_test)).batch(128)

model = keras.Sequential([
    keras.layers.Dense(units=24, activation='relu'),
    keras.layers.Dense(units=10, activation='relu'),
    keras.layers.Dense(units=1, activation='sigmoid'),
])

model.compile(optimizer='adam', 
              loss='binary_crossentropy',
              metrics=['accuracy'])

training = model.fit(
    train_set.repeat(), 
    epochs=50, 
    steps_per_epoch=500,
    validation_data=test_set.repeat(), 
    validation_steps=2
)





# Apllying explanation model by Fan et al
#headings[8:10]

#using only two features of the data i.e. â€˜race_Caucasian' and 'race_AfricanAmerican' 

#KB Construction
count = {'A0': [0,0], 'A1': [0,0],'B0': [0,0],'B1': [0,0], 'A0B0':[0,0],'A0B1':[0,0],'A1B0':[0,0],'A1B1':[0,0]}
for i in range(17500):
  feaVal = X_train[i,8:10]
  label = int(Y_train[i])
  S = ['A'+str(int(feaVal[0])), 'B'+str(int(feaVal[1])), 'A'+str(int(feaVal[0])) + 'B'+str(int(feaVal[1]))]
  for clause in S:
    if clause in count:
      count[clause][0] = count[clause][0]+1
      count[clause][1] = count[clause][1]+label

K = dict()
for key in count:
  if count[key][0] != 0:
    p = count[key][1]/count[key][0]
    K['POS V ~' + key] = p



#Relevant KB construction
RK = dict()
Query = X_test[0]

feaVal = Query[8:10]
S = ['A'+str(int(feaVal[0])), 'B'+str(int(feaVal[1])), 'A'+str(int(feaVal[0])) + 'B'+str(int(feaVal[1]))]
for key in S:
  for clause in K:
    if clause == key or clause[7:11]==key:
      RK[clause] = K[clause]
